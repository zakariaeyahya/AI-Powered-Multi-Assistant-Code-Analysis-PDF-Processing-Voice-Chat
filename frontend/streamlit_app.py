import streamlit as st
import requests
import tempfile
import os
# Fonction pour effacer l'historique
from streamlit.runtime.scriptrunner import RerunException
from streamlit.runtime.scriptrunner import RerunData
import streamlit as st
import requests
import numpy as np
import sounddevice as sd
import io
import wave
# Configuration de la page Streamlit
st.set_page_config(page_title="Analyseur de Code Python, PDF et Assistant IA", layout="wide")

# Initialisation des variables de session
if 'code' not in st.session_state:
    st.session_state.code = ""
if 'pdf_text' not in st.session_state:
    st.session_state.pdf_text = ""
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = {"code": [], "general": [], "pdf": [], "vocal": []}

# Fonction pour envoyer une requ√™te au backend
def send_request(endpoint, data=None, files=None):
    try:
        url = f"http://localhost:8000/{endpoint}"
        if files:
            response = requests.post(url, files=files)
        elif data:
            response = requests.post(url, json=data)
        else:
            response = requests.post(url)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        st.error(f"Erreur de communication avec le serveur: {str(e)}")
        return None
def clear_history(assistant_type):
    response = send_request("clear_history", data={"assistant_type": assistant_type})
    if response and response.get('message'):
        st.success(response['message'])
        st.session_state.chat_history[assistant_type] = []
        st.rerun()
    else:
        st.error("Erreur lors de l'effacement de l'historique")
def transcribe_and_translate_page():
    st.title("Transcription et Traduction Audio")
    
    uploaded_file = st.file_uploader("Choisissez un fichier audio", type=["wav", "mp3", "opus"])
    
    if uploaded_file is not None:
        st.audio(uploaded_file, format='audio/ogg')
        
        if st.button("Transcrire et Traduire"):
            with st.spinner("Traitement en cours..."):
                files = {'file': uploaded_file}
                response = send_request("transcribe_and_translate", files=files)
                
                if response:
                    st.success("Traitement termin√© !")
                    st.write(f"Langue d√©tect√©e : {response['detected_language']}")
                    st.write("Transcription :")
                    st.write(response['transcription'])
                    st.write("Traduction en fran√ßais :")
                    st.write(response['french_translation'])
                else:
                    st.error("Une erreur s'est produite lors du traitement.")

# Ajoutez cette nouvelle page √† votre dictionnaire de pages
def home_page():
    st.title("üè† Bienvenue dans notre Application d'Analyse et d'Assistance IA")
    
    # Introduction
    st.markdown("""
    Bienvenue dans notre application r√©volutionnaire d'analyse et d'assistance IA. 
    Nous sommes ravis de vous offrir une exp√©rience unique combinant analyse de code, 
    traitement de documents et interaction vocale, le tout propuls√© par une IA de pointe.
    """)

    # Notre Vision
    st.header("üöÄ Notre Vision")
    st.markdown("""
    Nous croyons en un avenir o√π l'IA est un outil accessible et puissant pour tous. 
    Notre application vise √† d√©mocratiser l'acc√®s aux technologies de pointe en IA, 
    permettant √† chacun d'am√©liorer sa productivit√© et sa compr√©hension dans divers domaines.
    """)

    # Nos Outils
    st.header("üõ†Ô∏è Nos Outils")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("1. üêç Analyse de Code Python et Assistant Code")
        st.markdown("""
        - Analyse statique de code Python
        - D√©tection d'erreurs et suggestions de corrections
        - Assistant IA pour r√©pondre √† vos questions sur le code
        """)
        
        st.subheader("2. üìÑ Analyse de PDF et Assistant PDF")
        st.markdown("""
        - Extraction de texte et de m√©tadonn√©es de fichiers PDF
        - R√©sum√© automatique du contenu
        - Assistant IA pour r√©pondre √† vos questions sur les documents
        """)
        
        st.subheader("3. ü§ñ Assistant G√©n√©ral")
        st.markdown("""
        - IA polyvalente pour r√©pondre √† une vari√©t√© de questions
        - Aide √† la recherche et √† la r√©solution de probl√®mes
        - Suggestions et id√©es cr√©atives
        """)

    with col2:
        st.subheader("4. üéôÔ∏è Chatbot Vocal")
        st.markdown("""
        - Interface de conversation vocale avec l'IA
        - Transcription automatique de la voix en texte
        - R√©ponses vocales g√©n√©r√©es par l'IA
        """)
    # Notre Engagement
    st.header("üå± Notre Engagement")
    st.markdown("""
    Nous nous engageons √† :
    - Fournir des outils IA √©thiques et transparents
    - Am√©liorer continuellement nos mod√®les et fonctionnalit√©s
    - Prot√©ger la confidentialit√© et la s√©curit√© de vos donn√©es
    - Rester √† l'√©coute de vos besoins et suggestions
    """)

    # Appel √† l'action
    st.header("üöÄ Pr√™t √† commencer ?")
    st.markdown("""
    Explorez nos fonctionnalit√©s via la barre lat√©rale et d√©couvrez comment notre IA peut transformer votre travail !
    N'h√©sitez pas √† nous faire part de vos retours pour nous aider √† am√©liorer continuellement notre application.
    """)

    # Bouton pour commencer
    if st.button("Commencer l'exploration"):
        st.session_state.page = "Analyse de Code et Assistant Code"
        st.rerun()
# Fonction g√©n√©rique pour afficher le chat et g√©rer les questions
def display_chat_and_handle_questions(assistant_type, content=""):
    st.header(f"Assistant {assistant_type.capitalize()}")

    # Cr√©er un conteneur pour l'historique du chat
    chat_container = st.container()

    # Zone de saisie (en bas)
    user_question = st.text_input(f"Poser une question sur {assistant_type}", key=f"input_{assistant_type}")
    send_button = st.button("Envoyer", key=f"send_{assistant_type}_question")

    if send_button and user_question:
        # Ajouter la question de l'utilisateur √† l'historique
        st.session_state.chat_history[assistant_type].append(("user", user_question))
        
        # Obtenir la r√©ponse de l'assistant
        with st.spinner(f"L'assistant {assistant_type} r√©fl√©chit..."):
            chat_response = send_request("chat", data={
                "message": user_question,
                "content": content,
                "assistant_type": assistant_type
            })
            if chat_response:
                assistant_response = chat_response['response']
                st.session_state.chat_history[assistant_type].append(("assistant", assistant_response))

    # Afficher l'historique du chat dans le conteneur
    with chat_container:
        for role, message in st.session_state.chat_history[assistant_type]:
            with st.chat_message(role):
                st.write(message)

    # Bouton pour effacer l'historique du chat
    if st.button(f"Effacer l'historique du chat {assistant_type}"):
        clear_history(assistant_type)
        raise RerunException(RerunData())
        # Faire d√©filer automatiquement vers le bas
    st.markdown('<script>window.scrollTo(0,document.body.scrollHeight);</script>', unsafe_allow_html=True)

# Page d'analyse de code et assistant code
def code_analysis_and_assistant_page():
    st.title("Analyse de Code Python et Assistant Code")
    # Analyse de code
    st.header("Analyse de Code")
    uploaded_files = st.file_uploader("Choisissez un ou plusieurs fichiers Python", type="py", accept_multiple_files=True)
    requirements_file = st.file_uploader("Choisissez le fichier requirements.txt", type="txt", accept_multiple_files=False)

    if uploaded_files and requirements_file:
        for uploaded_file in uploaded_files:
            st.write("Fichier charg√© :", uploaded_file.name)

        if st.button("Analyser et Corriger"):
            for uploaded_file in uploaded_files:
                with st.spinner(f"Analyse en cours pour {uploaded_file.name}..."):
                    files = {'file': uploaded_file, 'requirements_file': requirements_file}
                    result = send_request("analyze", files=files)

                    if result:
                        st.subheader(f"R√©sultats pour {uploaded_file.name}")
                        if result.get('error'):
                            st.error("Erreur d√©tect√©e :")
                            st.code(result['error'])
                            st.write("Code corrig√© :")
                            st.code(result['corrected_code'])
                        else:
                            st.success("Aucune erreur d√©tect√©e.")
                            st.write("Analyse du code :")
                            st.write(result['analysis'])

                        st.session_state.code += f"\n\n# Fichier: {uploaded_file.name}\n{result.get('original_code', '')}"
        # Assistant Code
    if st.session_state.code:
        st.write("Code actuel :")
        st.code(st.session_state.code, language="python")
        display_chat_and_handle_questions("code", st.session_state.code)
    else:
        st.warning("Veuillez d'abord charger et analyser un ou plusieurs fichiers Python pour pouvoir poser des questions sur le code.")

# Page d'assistant g√©n√©ral
def assistant_general_page():
    st.title("Assistant G√©n√©ral")
    display_chat_and_handle_questions("general")

def pdf_analysis_and_assistant_page():
    st.title("Analyse de PDF et Assistant PDF")

    # Analyse de PDF
    st.header("Analyse de PDF")
    uploaded_files = st.file_uploader("Choisissez un ou plusieurs fichiers PDF", type="pdf", accept_multiple_files=True)

    if uploaded_files:
        for uploaded_file in uploaded_files:
            st.write("Fichier charg√© :", uploaded_file.name)

        if st.button("Analyser les PDFs"):
            for uploaded_file in uploaded_files:
                with st.spinner(f"Analyse en cours pour {uploaded_file.name}..."):
                    files = {'file': uploaded_file}
                    result = send_request("analyze_pdf", files=files)

                    if result and result.get('pdf_text'):
                        st.subheader(f"R√©sultats pour {uploaded_file.name}")
                        st.success("PDF analys√© avec succ√®s.")
                        st.session_state.pdf_text = result['pdf_text']
                    else:
                        st.error(f"Erreur lors de l'analyse du PDF {uploaded_file.name}.")
                        st.session_state.pdf_text = ""

        display_chat_and_handle_questions("pdf", st.session_state.pdf_text)
    else:
        st.warning("Aucun PDF n'a √©t√© charg√© avec succ√®s.")
def voice_chat_page():
    st.title("Chatbot Vocal")
    
    # Cr√©er un conteneur pour l'historique du chat vocal
    chat_container = st.container()
    
    # Afficher l'historique du chat vocal (seulement les r√©ponses de l'assistant)
    with chat_container:
        for role, message in st.session_state.chat_history["vocal"]:
            if role == "assistant":
                with st.chat_message(role):
                    st.write(message)
    
    audio_file = st.file_uploader("Choisissez un fichier audio", type=["wav", "mp3", "ogg", "opus"])
    
    if audio_file is not None:
        st.audio(audio_file)
        
        if st.button("Traiter l'audio"):
            files = [('audio_file', (audio_file.name, audio_file.getvalue(), f'audio/{audio_file.type}'))]
            
            with st.spinner("Traitement en cours..."):
                response = requests.post("http://localhost:8000/voice_chat", files=files)
            
            if response.status_code == 200:
                result = response.json()
                assistant_response = result["original_response"]
                
                # Ajouter seulement la r√©ponse de l'assistant √† l'historique
                st.session_state.chat_history["vocal"].append(("assistant", assistant_response))
                
                # Afficher la nouvelle r√©ponse
                with st.chat_message("assistant"):
                    st.write(assistant_response)
            else:
                st.error(f"Erreur: {response.text}")
    
    # Bouton pour effacer l'historique du chat vocal
    if st.button("Effacer l'historique du chat vocal"):
        clear_history("vocal")
# Page √Ä propos
def about_page():
    st.title("‚ÑπÔ∏è √Ä propos de notre Projet IA Innovant")
    
    # Mission
    st.header("üåü Notre Mission")
    st.markdown("""
    Nous visons √† cr√©er un √©cosyst√®me IA int√©gr√© qui autonomise les utilisateurs dans leurs t√¢ches quotidiennes, 
    de l'analyse de code √† la compr√©hension de documents complexes. Notre objectif est de rendre l'IA accessible, 
    utile et transparente pour tous.
    """)

    # Technologie
    st.header("üî¨ Technologie de Pointe")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Frontend")
        st.markdown("- Streamlit pour une interface utilisateur r√©active et intuitive")
    with col2:
        st.subheader("Backend")
        st.markdown("- FastAPI pour des performances optimales et une scalabilit√© accrue")
    st.subheader("IA")
    st.markdown("- Mod√®les de traitement du langage naturel et de la parole √† la pointe de la technologie")
    st.markdown("- Int√©gration de mod√®les multimodaux pour une compr√©hension contextuelle riche")

    # Objectifs
    st.header("üéØ Nos Objectifs")
    st.subheader("Court Terme")
    st.markdown("""
    1. Am√©lioration continue de la pr√©cision de nos mod√®les d'IA
    2. Int√©gration de nouvelles langues pour la transcription et la traduction
    3. D√©veloppement d'une fonctionnalit√© de g√©n√©ration de code assist√©e par IA
    """)
    st.subheader("Long Terme")
    st.markdown("""
    - Cr√©er un assistant IA personnalis√© adaptable √† chaque industrie
    - D√©velopper des capacit√©s d'apprentissage en continu pour une am√©lioration constante
    - √âtablir des partenariats strat√©giques pour √©tendre notre port√©e et notre impact
    """)

    # Innovation
    st.header("üí° Innovation Continue")
    st.markdown("""
    Notre √©quipe travaille sans rel√¢che sur :
    - L'int√©gration de mod√®les d'IA multimodaux pour une compr√©hension plus riche du contexte
    - Le d√©veloppement d'une plateforme collaborative bas√©e sur l'IA pour le d√©veloppement de logiciels
    - L'exploration de l'IA explicable pour renforcer la confiance et la transparence
    """)

    # Collaboration et Open Source
    st.header("ü§ù Collaboration et Open Source")
    st.markdown("""
    Nous croyons en la puissance de la communaut√©. Certains de nos outils sont open source, 
    et nous encourageons activement les contributions externes pour fa√ßonner l'avenir de l'IA.
    Rejoignez-nous sur GitHub et participez √† notre mission !
    """)

    # Impact Global
    st.header("üåç Impact Global")
    st.markdown("""
    Notre objectif est de rendre l'IA accessible √† tous, ind√©pendamment de l'expertise technique, 
    contribuant ainsi √† l'innovation et √† la r√©solution de probl√®mes √† l'√©chelle mondiale. Nous visons 
    √† avoir un impact positif dans des domaines tels que l'√©ducation, la sant√© et la recherche scientifique.
    """)

    # S√©curit√© et √âthique
    st.header("üîí S√©curit√© et √âthique")
    st.markdown("""
    La protection des donn√©es et l'utilisation √©thique de l'IA sont au c≈ìur de notre philosophie. 
    Nous adh√©rons aux meilleures pratiques en mati√®re de s√©curit√© et de confidentialit√©, et nous 
    nous engageons √† utiliser l'IA de mani√®re responsable et transparente.
    """)

    # L'√©quipe
    st.header("üë• Notre √âquipe")
    st.markdown("""
    Notre √©quipe diversifi√©e est compos√©e d'experts en IA, en d√©veloppement logiciel, en s√©curit√© des donn√©es 
    et en exp√©rience utilisateur. Nous sommes unis par notre passion pour l'innovation et notre engagement 
    √† cr√©er des solutions IA qui am√©liorent r√©ellement la vie des gens.
    """)

    # Rejoindre l'aventure
    st.header("üöÄ Rejoignez l'Aventure")
    st.markdown("""
    Nous sommes toujours √† la recherche de talents passionn√©s et d'utilisateurs enthousiastes 
    pour fa√ßonner l'avenir de l'IA. Que vous soyez d√©veloppeur, data scientist, designer UX 
    ou simplement passionn√© par l'IA, il y a une place pour vous dans notre communaut√©.
    """)

    # Contact
    st.header("üìû Contact")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("""
        - üìß Email : zakariae.yh@gmail.com
        - üíº LinkedIn : [Zakariae Yahya](https://www.linkedin.com/in/zakariae-yahya/)
        """)
    with col2:
        st.markdown("""
        - üêô GitHub : [zakariaeyahya](https://github.com/zakariaeyahya)
        """)

    # Appel √† l'action
    st.markdown("""
    Votre feedback est pr√©cieux ! N'h√©sitez pas √† nous contacter pour toute suggestion, 
    question ou id√©e de collaboration. Ensemble, fa√ßonnons l'avenir de l'IA !
    """)

    # Bouton de contact
    if st.button("Contactez-nous"):
        st.markdown("üìß Envoyez-nous un email √† : zakariae.yh@gmail.com")

# D√©finition des pages
pages = {
    "üè† Accueil": home_page,
    "üêç Analyse de Code et Assistant Code": code_analysis_and_assistant_page,
    "üìÑ Analyse de PDF et Assistant PDF": pdf_analysis_and_assistant_page,
    "ü§ñ Assistant G√©n√©ral": assistant_general_page,
    "üéôÔ∏è Chatbot Vocal": voice_chat_page,
    "‚ÑπÔ∏è √Ä propos": about_page
}

# Navigation
st.sidebar.title("üìå Navigation")
selection = st.sidebar.radio("Aller √†", list(pages.keys()))

# Appel de la fonction correspondant √† la page s√©lectionn√©e
pages[selection]()

